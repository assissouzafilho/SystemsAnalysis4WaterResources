# import Pkg; Pkg.add("HiGHS")
using JuMP, HiGHS, Random, Plots

# Definição do tempo de simulação
T = 12  # Horizonte de 12 meses

# Pontos de discretização para a relação Área-Volume
V_points = [200, 400, 600, 800, 1000]  # Volumes (hm³)
A_points = [10, 30, 50, 65, 75]        # Áreas correspondentes (km²)

# Coeficiente de evaporação (constante para simplificação)
k_evap = 0.002  # Coeficiente de evaporação (m/mês convertido para hm³/mês)

# Capacidade dos reservatórios
Vmax1, Vmax2, Vmax3 = 1000.0, 800.0, 600.0
Vmin1, Vmin2, Vmin3 = 200.0, 150.0, 100.0

# Vazão máxima permitida nos reservatórios
Qmax1, Qmax2, Qmax3 = 100.0, 80.0, 70.0

# Inicialização dos volumes dos reservatórios
V0_1, V0_2, V0_3 = 500.0, 400.0, 300.0

# Geração de séries sintéticas de vazão afluente e demanda sazonal
Random.seed!(42)
Qafluente1 = [50 + 20 * sin(2π * t / 12) + 10 * randn() for t in 1:T]
Qafluente2 = [20 + 10 * sin(2π * t / 12) + 5 * randn() for t in 1:T]
Qafluente3 = [15 + 8 * sin(2π * t / 12) + 4 * randn() for t in 1:T]

D1 = [40 + 5 * sin(2π * t / 12) for t in 1:T]
D2 = [30 + 4 * sin(2π * t / 12) for t in 1:T]
D3 = [25 + 3 * sin(2π * t / 12) for t in 1:T]
D4 = [35 + 6 * sin(2π * t / 12) for t in 1:T]  # Demanda compartilhada entre R2 e R3

# Definição do passo de tempo (conversão para hm³/mês)
Δt = 30.0 * 24.0 * 3600.0 / 1e6  # Conversão para hm³/mês

# Criação do modelo de otimização
modelo = Model(HiGHS.Optimizer)

# Variáveis de volume nos reservatórios
@variable(modelo, Vmin1 <= V1[1:T] <= Vmax1)
@variable(modelo, Vmin2 <= V2[1:T] <= Vmax2)
@variable(modelo, Vmin3 <= V3[1:T] <= Vmax3)

# Variáveis de controle e vertimento
@variable(modelo, 0 <= Qcontrol1[1:T] <= Qmax1)
@variable(modelo, 0 <= Qcontrol2[1:T] <= Qmax2)
@variable(modelo, 0 <= Qcontrol3[1:T] <= Qmax3)
@variable(modelo, 0 <= Qvert1[1:T] <= Qmax1)
@variable(modelo, 0 <= Qvert2[1:T] <= Qmax2)
@variable(modelo, 0 <= Qvert3[1:T] <= Qmax3)
@variable(modelo, 0 <= QD4_2[1:T] <= Qmax2)  # R2 pode abastecer D4
@variable(modelo, 0 <= QD4_3[1:T] <= Qmax3)  # R3 pode abastecer D4

# Erros de atendimento das demandas
@variable(modelo, z1[1:T] >= 0)
@variable(modelo, z2[1:T] >= 0)
@variable(modelo, z3[1:T] >= 0)
@variable(modelo, z4[1:T] >= 0)

# Variáveis auxiliares para linearização da evaporação
@variable(modelo, λ1[1:length(V_points)-1, 1:T] >= 0)
@variable(modelo, λ2[1:length(V_points)-1, 1:T] >= 0)
@variable(modelo, λ3[1:length(V_points)-1, 1:T] >= 0)

# Interpolação linear (somatório das frações de volume)
@constraint(modelo, [t = 1:T], sum(λ1[:, t]) == 1)
@constraint(modelo, [t = 1:T], sum(λ2[:, t]) == 1)
@constraint(modelo, [t = 1:T], sum(λ3[:, t]) == 1)

# Definição do volume total usando interpolação linear
@constraint(modelo, [t = 1:T], V1[t] == sum(λ1[i, t] * V_points[i] for i in 1:length(V_points)-1))
@constraint(modelo, [t = 1:T], V2[t] == sum(λ2[i, t] * V_points[i] for i in 1:length(V_points)-1))
@constraint(modelo, [t = 1:T], V3[t] == sum(λ3[i, t] * V_points[i] for i in 1:length(V_points)-1))

# Aproximação da evaporação
@variable(modelo, E1[1:T] >= 0)
@variable(modelo, E2[1:T] >= 0)
@variable(modelo, E3[1:T] >= 0)

@constraint(modelo, [t = 1:T], E1[t] == k_evap * sum(λ1[i, t] * A_points[i] for i in 1:length(V_points)-1))
@constraint(modelo, [t = 1:T], E2[t] == k_evap * sum(λ2[i, t] * A_points[i] for i in 1:length(V_points)-1))
@constraint(modelo, [t = 1:T], E3[t] == k_evap * sum(λ3[i, t] * A_points[i] for i in 1:length(V_points)-1))

# Restrições de balanço hídrico linearizado
@constraint(modelo, V1[1] == V0_1)
@constraint(modelo, V2[1] == V0_2)
@constraint(modelo, V3[1] == V0_3)

@constraint(modelo, [t = 1:T-1],
    V1[t+1] == V1[t] + (Qafluente1[t] - Qcontrol1[t] - Qvert1[t] - E1[t]) * Δt)

@constraint(modelo, [t = 1:T-1],
    V2[t+1] == V2[t] + (Qafluente2[t] + Qvert1[t] - Qcontrol2[t] - QD4_2[t] - Qvert2[t] - E2[t]) * Δt)

@constraint(modelo, [t = 1:T-1],
    V3[t+1] == V3[t] + (Qafluente3[t] - Qcontrol3[t] - QD4_3[t] - Qvert3[t] - E3[t]) * Δt)

# Restrição para atendimento das demandas
@constraint(modelo, [t = 1:T], Qcontrol1[t] + z1[t] >= D1[t])
@constraint(modelo, [t = 1:T], Qcontrol2[t] + z2[t] >= D2[t])
@constraint(modelo, [t = 1:T], Qcontrol3[t] + z3[t] >= D3[t])
@constraint(modelo, [t = 1:T], QD4_2[t] + QD4_3[t] + z4[t] >= D4[t])

# Função Objetivo: Minimizar falhas no atendimento e vertimentos
@objective(modelo, Min, sum(10 * (z1[t] + z2[t] + z3[t] + z4[t]) +
                            5 * (Qvert1[t] + Qvert2[t] + Qvert3[t]) for t in 1:T))

# Resolver o modelo
optimize!(modelo)

# Exibir solução ótima
println("Volume ótimo do reservatório 1: ", value.(V1))
println("Volume ótimo do reservatório 2: ", value.(V2))
println("Volume ótimo do reservatório 3: ", value.(V3))
